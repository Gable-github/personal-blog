{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hey there! I'm Gabryel.","text":"<p>I don't know how you made it here, but this is essentially my safe space to blurt out my thoughts that fill my mental space. If you're looking for a professional version of me look here -&gt; gabryelsoh.com.</p>"},{"location":"#writing-freely","title":"Writing freely","text":"<p>As I grow older, most of the things that I write are meant to be seen, checked and \"graded\" or feedback-ed by others. This blog is meant to be a space where I just speak freely, with nobody's feedback. I find it liberating, to be able to write with almost no standard form or function :)</p>"},{"location":"#contents-of-this-personal-blog","title":"Contents of this personal blog","text":"<p>Maybe one day I'll organize the contents in this blog neat and nicely, but for now, being a mishmash of my personal journey, passions, and random thoughts possibly surrounding nostalgia is what you'll get.</p> <p>Check out the Blog section to see all my posts.</p>"},{"location":"#socials","title":"Socials","text":"<p>If you made it all the way here, we might as well connect!</p> <ul> <li>Portfolio: gabryelsoh.com</li> <li>GitHub: @gable-github </li> <li>LinkedIn: linkedin.com/in/gabryel-soh</li> </ul>"},{"location":"about/","title":"About Me","text":"<p>(Incoming NPC introduction) I'm Gabryel, a CS Junior at the Singapore University of Technology and Design (SUTD) focused on backend development and building scalable applications with ML and AI. When I'm not coding, I'm at the gym or playing basketball.</p>"},{"location":"about/#projects-im-currently-working-on","title":"Projects I'm currently working on","text":"<ul> <li>Developing an open-source Spring Boot authentication microservice thats configurable and reusable for projects requiring user authentication and authorization, allowing developers to focus on building core features rather than spending precious time making this service.</li> <li>Developing a video summarization application that allows professionals to quickly skim through informational content like keynote speeches, long lectures, etc.</li> <li>Developing a contribution rules enforcer for merging codebases or large PRs.</li> <li>Contributing to open-source projects that I happen to use and take an interest in and seem active enough.</li> <li>Consistent leetcode practice. </li> </ul>"},{"location":"posts/","title":"Blog Posts","text":""},{"location":"posts/#june-2025","title":"June 2025","text":"<ul> <li>How to understand a new codebase? A walkthrough</li> <li>Whats the best way to practice leetcode?</li> <li>Social Media Detox: Reading Deeply, Energy Levels, and Thinking Less</li> </ul>"},{"location":"posts/#april-2025","title":"April 2025","text":"<ul> <li>Open Source: Springboot Auth Microservice</li> </ul>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/","title":"How to Add Blog Posts - Quick Reference","text":"<p>This is a reference guide for future me on how to add new blog posts to this MkDocs blog.</p>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#creating-a-new-blog-post","title":"Creating a New Blog Post","text":""},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#1-file-naming-convention","title":"1. File Naming Convention","text":"<pre><code>docs/posts/YYYY-MM-DD-topic-name.md\n</code></pre> <p>Examples: - <code>2024-01-16-spring-security-basics.md</code> - <code>2024-01-17-postgresql-indexing-tips.md</code> - <code>2024-01-18-debugging-microservices.md</code></p>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#2-file-template","title":"2. File Template","text":"<p>Every post needs this frontmatter at the top:</p> <pre><code>---\ntitle: \"Your Post Title Here\"\ndate: 2024-01-16\nauthors:\n  - Gabryel Soh\ndescription: \"Brief description of the post content\"\n---\n\n# Your Post Title Here\n\nYour content goes here...\n</code></pre>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#adding-posts-to-navigation","title":"Adding Posts to Navigation","text":"<p>After creating the post file, add it to <code>mkdocs.yml</code>:</p> <pre><code>nav:\n  - Home: index.md\n  - Blog:\n    - posts/index.md\n    - \"How to Add Posts\": posts/2024-01-15-setting-up-mkdocs-blog.md\n    - \"Your New Post Title\": posts/2024-01-16-your-new-post.md  # Add here\n  - About: about.md\n</code></pre>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#development-workflow","title":"Development Workflow","text":""},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#start-development-server","title":"Start Development Server","text":"<pre><code>source .venv/bin/activate\nmkdocs serve --dev-addr 127.0.0.1:8001\n</code></pre>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#build-site","title":"Build Site","text":"<pre><code>source .venv/bin/activate\nmkdocs build\n</code></pre>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#deploy-via-github-actions","title":"Deploy (via GitHub Actions)","text":"<p>Just push to main branch - GitHub Actions runners and Github pages will update the site automatically.</p>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#quick-checklist","title":"Quick Checklist","text":"<p>When adding a new post:</p> <ul> <li> Create file with correct naming: <code>YYYY-MM-DD-topic.md</code></li> <li> Add proper frontmatter with title, date</li> <li> Write content with clear structure</li> <li> Add to navigation in <code>mkdocs.yml</code></li> <li> Test locally with <code>mkdocs serve</code></li> <li> Commit and push</li> </ul>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#future-improvements","title":"Future Improvements","text":""},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#tags-implementation","title":"Tags Implementation","text":"<ul> <li>Add tags system: Implement MkDocs Material tags plugin for automatic tag pages</li> </ul>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#automatic-blog-listing","title":"Automatic Blog Listing","text":"<ul> <li>Blog plugin: Use <code>mkdocs-material[blog]</code> plugin for automatic post listing</li> <li>Chronological sorting: Posts automatically sorted by date</li> <li>Pagination: Handle large numbers of posts</li> <li>RSS feed: Automatic RSS generation for subscribers</li> <li>Archive pages: Monthly/yearly archives</li> </ul>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#enhanced-features","title":"Enhanced Features","text":"<ul> <li>Search improvements: Better search with tag and category filters</li> <li>Reading time: Automatic reading time estimation</li> <li>Recent posts widget: Show latest posts on homepage</li> <li>Category pages: Automatic category listing pages</li> </ul>"},{"location":"posts/2024-01-15-setting-up-mkdocs-blog/#categories","title":"Categories","text":"<ul> <li>Will add as I go along</li> </ul> <p>This reference guide will be updated as the blog workflow evolves.</p>"},{"location":"posts/2025-06-04-springboot-auth-microservice/","title":"Open Source: Springboot Auth Microservice","text":"<p>Recognizing the recurring challenges of implementing secure authentication across distributed systems, I developed this lightweight authentication microservice to address common user management and JWT-based authentication requirements.</p> <p>Built with Spring Boot, it's designed to be easily integrated into any microservice architecture, almost like plug-and-play where you've got a fully functional auth system for your other services.</p> <p>This project was created to provide a production-ready, secure, and well-documented authentication solution that streamlines development while maintaining enterprise-grade security standards for all.</p> <p>The microservice is designed for flexible deployment across various environments - from local development to production-grade infrastructure, supporting both containerized deployments via Docker and orchestration through Kubernetes.</p> <p>API documentation is provided through SpringDoc OpenAPI (Swagger UI).</p> <p>Key Features:</p> <ul> <li>User registration and login endpoints</li> <li>JWT-based authentication and authorization</li> <li>Secure password hashing and input validation</li> <li>PostgreSQL database integration</li> <li>Environment-based configuration (local, production, Docker)</li> <li>AWS Secrets Manager for secure secret management in production</li> <li>RESTful API design with clear separation of concerns</li> <li>Comprehensive unit and integration tests</li> <li>Docker support for easy deployment and development</li> </ul> <p>Security Highlights:</p> <ul> <li>Passwords are securely hashed before storage</li> <li>JWT tokens are signed and validated using environment secrets</li> <li>Production secrets managed via AWS Secrets Manager</li> <li>HTTPS recommended for all deployments</li> </ul> <p>Development &amp; Deployment:</p> <ul> <li>Profile-based configuration for local and production</li> <li>Docker Compose for local and production-like environments</li> <li>CI/CD with Github Actions</li> </ul> <p>For more details, see the GitHub repository. </p>"},{"location":"posts/2025-06-14-social-media-detox-and-personal-growth/","title":"Social Media Detox: Reading Deeply, Energy Levels, and Thinking Less","text":"<p>Recently, I've been on a social media detox and have been trying to (1) re-learn how to read deeply, (2) maintain my energy levels. (3) think less.</p>"},{"location":"posts/2025-06-14-social-media-detox-and-personal-growth/#reading-deeply","title":"Reading Deeply","text":"<p>I've come to understand from my own experiences that 2 key factors to deeply understanding a topic and becoming a master at it is reading and practicing. It is rarely in another form of content other than written text that can convey the same depth of a topic.</p> <p>Most content about topics are shallow and surface-level, mainly because the algorithm for various social media sites reward creators that can reach out to a vast audience, which means that their content are generally more broad and do not drill into the deeper areas of a topic. Even with the advent of LLMs, anyone who has tried to understand a topic deeply will know that it is very difficult to get the LLM to explain something deeply. It will most times simply agree with your and echo your ideas. And you end up relying on the LLM to cover your edge cases that you were just fed, none the wiser about real-world edge cases that you are missing. Essentially you are letting the LLM \"ownself check ownself\" when it is clearly unreliable in that aspect.</p> <p>For example, when writing test cases for a program in a new language, asking an LLM to cover \"all\" edge cases can be misleading. The LLM will confidently claim it's covering everything, but without domain experience or understanding of idiomatic testing practices, you will probably miss many critical real-world scenarios that only come with practical experience. </p> <p>An occurance that's far too common</p> <p>\"You're right! I did miss out on XYZ. Here is the updated solution...\" - Sound familiar?</p>"},{"location":"posts/2025-06-14-social-media-detox-and-personal-growth/#energy-levels","title":"Energy levels","text":"<p>This year (2025), I lived in the Bay Area for around 8 months, doing both an internship in SF and an exchange at UC Berkeley. During this time, I did not anticipate one of the hardest things to overcome (I am still in the process of doing so) - loneliness, isolation, and an unassuming routine. For me, it was really easy to constantly feel left out from my friends and peers back home in Singapore. </p> <p>Feeling left out because I'm taking a different path from them, one that promised a greater understanding of the epicentre of software innovation flush with VC money, at the cost of being a year behind my peers. It feels like I voluntarily set myself behind my friends. As such, voices would start creeping into my head, mostly doubting if what I'm doing here would really benefit me in the long run. Asking myself \"what if this decision to stay an extra year and come to the US was just a big waste of time?\". </p> <p>But then the more I enjoyed understanding deeper about topics I was interested in, the more I practiced for the sake of exercising my mental muscles, the more I played basketball and hit the gym, the less these thoughts would occur. The more I started caring more about myself and clearing my head naturally with exercise, the less these thoughts would seem to come. I also realised that life isin't really an equation. You can work hard and be unlucky. You can work less and be lucky. Comparison is natural, but I guess a glance at these things only from time to time and rather sticking to following on my North Star feels better. And it results in personal growth. I wouldn't say that personally personal growth feels \"amazing!\" but it is satisfying and thats better than sitting around and wallowing in my perceived inadequateness compared to others.</p> <p>Especially after the gym + basketball + a good shower (I love the gym shower), my head feels clear and quiet. There are no \"I'm tired\" or \"lets take a break\" thoughts. I actually felt it coming out when I parked my car coming home from the gym, and was able to consciously block it out, mainly because of good energy levels. </p>"},{"location":"posts/2025-06-14-social-media-detox-and-personal-growth/#thinking-less","title":"Thinking less","text":"<p>A thought that creeps in too often</p> <p>I don't remember being this tired when I was a teenager - I must be getting old.</p> <p>This was a common thought that came to my head. Very insidious because I only realised halfway through my time in the US that this thought would lead to almost blind acceptance that either: I was tired and I should beat myself up over feeling tired, or I am old and getting tired.</p> <p>I was talking to my roomate about my tuition teacher back in Secondary School, Miss Catherine. I remember greatly pulling my math grades from a fail to an A in a few months. Because there would be 3x 3 hour sessions where she would just give us a bunch of questions to do after teaching a topic for 30 minutes. I then recalled that during those 3 hour sessions, sometimes it would be straight after school where I was sweaty and nasty. Sitting in a cold air conditioned room. </p> <p>I actually remembered that I was actually tired as well! I remember fighting for my life to keep my eyes open, and how Miss Catherine would sternly mention my name and I'd almost jump out of my seat. She'd tell me to go wash my face and come back. And thats what I ended up doing. I didn't overthink it back then. I accepted that I was tired, but I had to continue and just did it without any extra energy spend on telling myself that this was what discipline looked like, etc. I just did it. Yea I was tired but I just came back to do it without really thinking much. </p> <p>So this kind of ties in to the previous point on energy levels. The greater the energy levels, the less these thoughts happen. And when I'm feeling tired, the less I overthink and I just take a break and come back to doing it.</p>"},{"location":"posts/2025-06-15-whats-the-best-way-to-practice-leetcode/","title":"Whats the best way to practice leetcode?","text":"<p>As of this date, I've been semi-consistently practicing leetcode. I do it when I can, and when I'm not too drained from the day.</p> <p>I recently had a conversation with a friend, reminiscing about the time long ago when I was doing math practice at my tuition teacher's house. It certainly was very gruelling - out of the 3 hours or so spent there, 30 minutes was dedicated to learning about the topic, and 2.5 hours was dedicated to practicing learned concepts.</p> <p>I remember each student in her class being given a photocopied page of the textbook practice page for the topic being taught that day. You know, the page at the back with questions ranging from \"basic\" to \"put on your thinking caps!\".</p> <p>What she would do is let us off for a 5 minute break right before we commenced that practice session, and after she completed teaching that topic.</p> <p>We'd come back from the break, and each person would have a textbook as well as the photocopied practice page. There'd also be an oreo packet or some snack, all placed neatly for everyone.</p> <p>We'd start doing the topic, and this is the key part - I now remember flipping back and forth from the practice questions and the formulae in the book. Why is this key? This is key because my mathematical agility and accuracy increased slowly but surely, and by the end of that practice session, I felt like I knew how to apply the concept to any question of decent difficulty. Did I prevent myself from looking back at the answer? No! Each time I forgot how to apply the formula, I just looked back at the topic, and eventually the mind would just start remembering the formula, after continuous practice. </p>"},{"location":"posts/2025-06-15-whats-the-best-way-to-practice-leetcode/#looking-at-the-answers","title":"Looking at the answers","text":"<p>Much like leetcode, when attempting a new topic in the Neetcode 150 list, somehow I never knew how much overthinking I was doing - preventing myself from looking at the answer. Eventually I learned to understand that the answer itself was the topic notes. I'm not going to be able to answer the question no matter how hard I try if I just dont understand and remember the formula. Let the remembering and understanding come naturally with practice, and practice should stay as practice, not a mock test.</p>"},{"location":"posts/2025-06-15-whats-the-best-way-to-practice-leetcode/#writing-java-vs-writing-algebra","title":"Writing Java vs writing algebra","text":"<p>Another factor at play is my foundational ability to implement whatever solution in my head onto the question before me. Much like how solving a trigonometric problem involving algebraic formulas is not possible if I'm not at least decent in algebra, I'll have a really hard time trying to remember so many things at once. The formula, the concept, the language. Too many things at once, stemming from a lack of practice of foundational grammar, will muddy the learning process of the core topic at hand.</p> <p>How do I then tackle topics?</p> <p>While thats a question I'm still in the process of answering, I'll be trying to focus on the learning of the topic at hand first, instead of trying to tackle everything at once. </p> <p>This means spending some time at least to understand the question, then seeing the answer. Then trying to apply the answer by \"flipping back and forth\"!</p> <p>I'll tag the question as completed, but I'll also note that it was my first time completing the question (for that topic). I will then try to reduce the time taken to complete the question in the future, and log every future attempt.</p> <p>Notes on the question should be written somewhere, with intent. I will keep a notion tracker to read my notes on each question.</p> <p>Another thing I did remember from her practice sessions was this - she'd go through select questions in the practice page in the last 30 minutes of the class. While she didn't tell us explicitly why she did this (we also didn't question it), I can only reverse engineer her rationale. That is, she did it because those questions specifically are just a little bit off the standard solution for the questions.</p> <p>I also remember skipping some questions and going on to the next question. Time was of the essence, and I didn't want to miss the forest for the trees by spending time grabbing the high hanging fruit when there are so many other low hanging fruits ahead. </p>"},{"location":"posts/2025-06-15-whats-the-best-way-to-practice-leetcode/#dont-beat-yourself-up-over-the-high-hanging-fruit-that-you-couldnt-get-be-happy-about-the-fruitful-harvest","title":"Don't beat yourself up over the high hanging fruit that you couldn't get, be happy about the fruitful harvest.","text":"<p>In short, practice a particular DSA topic like its a harvest. I'm looking to be generally good at answering most of the questions. I'm not looking to prove to myself that I can answer the tricky questions - those are the questions you'd skip and instead wait for her to go through in the end anyway.</p> <p>The key in this case is to use the questions again as practice, this time without looking at the answer, and having a timer to solve the question. </p> <p>Oh yea, I almost forgot to mention one thing.</p>"},{"location":"posts/2025-06-15-whats-the-best-way-to-practice-leetcode/#feeling-tired","title":"Feeling tired?","text":"<p>It's. Normal. To. Feel. Tired.</p> <p>I dove deep into my own memories and I realised that once a week out of the 3 math tuition sessions, the day would just be so hectic, and I'd come to her house really nasty and having that sweaty, secondary school kid smell. God was it gross. </p> <p>Thankfully, I can avoid that now, at least to that degree of nastiness. A little sweat should be fine. But the main point is - those days I recalled being so tired, and I would be fighting to keep my eyes open during the session. However, her strictness, which manifested in short and sharp callings of whoever is falling asleep, combined with a \"Lets try to complete this practice page\" mentality, allowed me to push through (yes I was sent to the washroom to wash my face and come back) and complete the session. </p> <p>As such I think that having a clear goal for the session (complete 3 questions to gain an understanding of the topic) and having a set session time are key things that would really help. It would help stave off the \"oh lets just do it tomorrow\" or \"I'm so sleepy - you need a break\" mental voices. Of course also setting time aside to just do this and not letting other stuff overlap into this time are also key!</p> <p>This is a key issue that I realised when trying to practice during internship times. I set my leetcode session in the morning but I'm usually rushing to complete something for my job in the morning. Hence I end up doing leetcode at night, and lacking much planning as mentioned above.</p>"},{"location":"posts/2025-06-15-whats-the-best-way-to-practice-leetcode/#final-thoughts","title":"FInal thoughts","text":"<p>There are a lot more things that I was thinking of talking about, and I wish I had the ability to turn my thoughts concisely into text. For now, here's a quick and dirty summary</p> <ul> <li>Practice leetcode consistently, like the routine math tuition sessions.</li> <li>Practice with the purpose of learning how to apply the new topic, instead of the practice being a test of your abilities (if doing a new topic).</li> <li>It's normal to feel tired - have a set time aside and do not let this time be used for anything else. Wake yourself up if you have to because you need this time to just practice.</li> </ul> <p>to be updated (or not!) if I have time but so far these written thoughts will suffice for now :) </p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/","title":"How do I understand a new codebase? A walkthrough.","text":""},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#overview","title":"Overview","text":"<p>I will walk through the understanding of a codebase without any plan first, then review how I looked through it after I'm done.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#raw-walkthrough","title":"Raw Walkthrough","text":"<p>Right now, I'm trying to integrate my 80% complete independent feature into the main codebase.</p> <p>The codebase uses Celery (which uses Redis as its message broker running on a separate docker container) to manage lifecycles of asynchronous tasks / processes. The codebase also uses  <code>FastAPI</code> and its native \"wrapper\" (for developer convenience) for websockets, which under the hood is the <code>starlette</code> websocket implementation, to expose data for frontend UIs. Client-server communication is hence a mix of both conventional <code>GET</code> and <code>POST</code> methods, combined with \"live-streamed\" data.</p> <p>How does the data get \"live-streamed\"?</p> <p>A websocket connection is established. Conventional websocket boilerplate (not exactly but I don't have a better word for this right now) are added, such as token authentication and websocket connection management.</p> <p>The core of the websocket is that (1) the user can send a <code>json</code> body over the active websocket connection, which details an <code>enum</code> of actions that a user can take, and (2) a continuous polling task, which reads ongoing task details from the redis database,  packages it into a Pydantic model (basically UI DTOs) and sends it to the client via the websocket in constant intervals.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#user-session-management","title":"User Session Management","text":"<p>There is also an additional feature to link the task data with users. The codebase uses <code>mixpanel</code>, which is a product analytics tool, that exposes a really simple python SDK that is used to access their API. We use the SDK and corresponding API to call methods that track the user's actions and session metadata while using the vscode extension. Metadata like the user <code>session_id</code> is then used in functions throughout the codebase as parameters.</p> <p>Tight coupling with the vscode api</p> <p>Apparently for now this is generally okay because most of the clients UI with the backend on their code is via vscode anyway.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#codebase-layout","title":"Codebase Layout","text":"<p>From a very high level look at the codebase, we only need to care about 2 folders. The <code>/server</code> and <code>/tasks</code> folder located in <code>root</code>.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#server-layout","title":"<code>/server</code> Layout","text":"<p><code>/server</code> contains the following:</p> <ul> <li><code>/routes</code> - Contains the endpoint methods, as well as the websocket.</li> <li><code>/actions</code> - Service layer, methods that make up the core business logic of the application</li> <li><code>/models</code> - DTO layer. Contains model definitions that standardize data being passed around the codebase.</li> <li><code>/utils</code> - Utilities mainly for config settings, connections, to <code>celery</code>, <code>redis</code>, <code>mixpanel</code><ul> <li>Need to understand the <code>middlewares.py</code> better...</li> </ul> </li> </ul>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#key-areas-to-note-about-the-server-module","title":"Key areas to note about the <code>/server</code> module","text":"<ol> <li> <p><code>analysis.py</code></p> <p>Contains endpoints for clients to send files and get results. </p> <p>Dependency Injection for FastAPI</p> <p>From what I've seen, its most commonly used in parameters for the API endpoint method parameters, as a validation step. E.g. a valid <code>redis.StrictRedis</code> object is needed as a parameter to the endpoint function. We will use <code>redis: StrictRedis = Depends(get_redis_connection)</code> such that the validation function is called and injects a valid or <code>null</code> object right before the function runs in runtime.</p> </li> <li> <p><code>repository.py</code></p> <p>Kind of similar to <code>analysis.py</code> but this time its to submit an entire repo.</p> </li> <li> <p><code>session.py</code></p> <p>API security is handled by <code>fastapi.security</code>. This handles <code>GET</code>, <code>POST</code> and <code>DELETE</code> at the <code>/session</code> endpoint for user sessions.</p> <p><code>fetch_session_models</code> is used at the <code>create</code> endpoint, which takes in the valid user credentials (session token) and valid redis connection. the \"validity\" of these 2 arguments are checked at the dependency injection level, before the endpoint method is even called.</p> <ul> <li><code>SessionData</code> is returned and it contains the jsonized output of the redis pipeline for that user (will be <code>None</code> or something, depending on the token existence checked by <code>redis.StrictRedis.pipeline.hget()</code>)</li> </ul> </li> </ol>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#fastapi-setup-to-be-updated","title":"FastAPI setup (to be updated)","text":"<p>Main file <code>app.py</code> is the main application factory that sets up the whole FastAPI server. </p> <p>Quick recap on what application factory is</p> <p>Application factory is a design pattern where we configure the main instance of the application with our own configuration. Many web frameworks like <code>Flask</code> and <code>FastAPI</code> uses this because users at the end need configurability for their application instance.</p> <p>Within the <code>create_app</code> function we can also ensure that the settings are initiallized globally throughout the application. This means we dont have to <code>os</code> call the env each time.</p> <p>Overall <code>app.py</code> loads configs, loggings, app creation with lifespan logic(?), adds routes and middleware, adds metric collection and redis, celery integrations. Then on app shutdown it gives a pdf.</p> <p>What is lifespan?</p> <p>These type of functions are when you want the function to execute halfway then yield until a future event occurs.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#intended-user-flow","title":"Intended User Flow","text":"<p>This codebase is originally meant for the user to interact with, whats seems to be the vscode extension. I think theres some vscode script layer than is an SDK for their UI that calls endpoints in our service.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#understanding-celery","title":"Understanding Celery","text":"<p>According to the Celery Documentation, its a distributed system that processes many messages + provide operations to maintain such a system.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#whats-a-task-queue","title":"Whats a task queue?","text":"<p>Task queue is a mechanism to distribute individual units of work across threads or machines.</p> <p>You need to have a dedicated worker process to constantly monitor task queues for new work to perform.</p> <p><code>Celery</code> uses a broker to mediate between clients and workers. A client adds a message to the queue, then the broker delivers the message to be picked up by the monitoring worker.</p> <p><code>Celery</code> can have multiple workers and brokers i.e. we can have high availability and horizontal scaling. It can run on a single machine, multiple machines, or even across data centers.</p> <p><code>Celery</code> needs a message transport to send and receive messages. <code>RabbitMQ</code> and <code>Redis</code> (and <code>Amazon SQS</code>) broker transports that are feature-complete. Which means we can almost plug and play with complete message broker features using either of these 2 libraries, without needing much code on top of whats already provided by them.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#a-quick-example","title":"A Quick Example","text":"<p>A client calls my endpoint and that endpoint method calls a method that is \"heavy\".</p> <p><code>Celery</code> will add the function to the <code>Redis</code> Queue. Under the hood, <code>Celery</code> will serialize the message packet before pushing it to the queue. Side note: the serialization of the task name and arguments are in <code>JSON</code> for <code>Celery</code> under the hood.</p> <p>Worker method, which is decorated by the <code>@celery_app.task</code> decorator and called earlier, is listening in a separate process. Result is then stored in some db of your choice. </p> <p>The workers match the task name in the serialized <code>JSON</code> to a registered <code>@celery_app.task</code> function, deserializes the arguments, and executes the python function, in another process.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#conclusion","title":"Conclusion","text":"<p>I think the way I tackled understanding codebase (this one in particular) is by looking at the routes first, because all code cascades from there. So I made a mental map and grouping of the different endpoints. Previous understanding of some common idiomatic practices like having a utils, DTOs, and service layer helps.</p> <p>On top of that are mostly reading up more on the documentation of other high level libraries being used to facilitate the application. In this case its Celery and Redis. </p> <p>Then after getting that kind of broad overview of the library I think I start to read deeper into how these libraries are actually implemented in the code. E.g. <code>app.py</code> for FastAPI is probably a standard format but with our own sprinklings on there for our custom purpose. This is the stage where we might start to see some weird issues that weren't previously resolved. Also at this stage, we might look at some more nitty gritty parts like why did we choose a certain design pattern (factory design). Be prepared to also learn about the code or language methods kind of level stuff because there will be some new kind of python or writing that is just a little bit hard to grasp. Do let yourself spend time reading articles and learning about those. </p> <p>!!! note \"<code>partial()</code>, <code>yield</code>, <code>*args, **kwargs</code>     These were just some of the things that I had to break my flow to go and read up more on. Using LLMs to aid can help, but I've found that the time spent reading articles somehow makes more sense to me. Probably a combination of the time spent learning about something and understanding the purpose of those stuff helps in a deeper understanding and consequently memory retention.</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#next-steps","title":"Next steps","text":"<p>I will start to try to implement my feature, with the expectation to get stuck diving deeper into something at some point!</p>"},{"location":"posts/2025-06-16-how-to-understand-a-new-codebase/#to-further-study","title":"TO FURTHER STUDY","text":"<ul> <li>mixpanel middleware</li> </ul>"}]}